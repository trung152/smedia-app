import { type ClassValue, clsx } from "clsx";
import localFont from "next/font/local";
import { twMerge } from "tailwind-merge";
import axios from "axios";

export const secretKey: string | undefined = process.env.NEXT_PUBLIC_SECRET_KEY;
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const scrollToSection = (sectionId: string) => {
  const section = document.getElementById(sectionId);
  if (section) {
    section.scrollIntoView({ behavior: "smooth" });
  }
};

export function isValidUrl(url: string): boolean {
  try {
    new URL(url);
    return true;
  } catch (err) {
    return false;
  }
}

export const listLanguages = [
  {
    code: "en",
    name: "English",
    img: "/en.svg",
  },
  {
    code: "es",
    name: "Spanish",
    img: "/es.svg",
  },
  {
    code: "fr",
    name: "French",
    img: "/fr.svg",
  },
  {
    code: "vi",
    name: "Vietnamese",
    img: "/vi.svg",
  },
];

const cleanAccent = (str: string): string => {
  str = str.replace(/√†|√°|·∫°|·∫£|√£|√¢|·∫ß|·∫•|·∫≠|·∫©|·∫´|ƒÉ|·∫±|·∫Ø|·∫∑|·∫≥|·∫µ/g, "a");
  str = str.replace(/√®|√©|·∫π|·∫ª|·∫Ω|√™|·ªÅ|·∫ø|·ªá|·ªÉ|·ªÖ/g, "e");
  str = str.replace(/√¨|√≠|·ªã|·ªâ|ƒ©/g, "i");
  str = str.replace(/√≤|√≥|·ªç|·ªè|√µ|√¥|·ªì|·ªë|·ªô|·ªï|·ªó|∆°|·ªù|·ªõ|·ª£|·ªü|·ª°/g, "o");
  str = str.replace(/√π|√∫|·ª•|·ªß|≈©|∆∞|·ª´|·ª©|·ª±|·ª≠|·ªØ/g, "u");
  str = str.replace(/·ª≥|√Ω|·ªµ|·ª∑|·ªπ/g, "y");
  str = str.replace(/ƒë/g, "d");
  str = str.replace(/√Ä|√Å|·∫†|·∫¢|√É|√Ç|·∫¶|·∫§|·∫¨|·∫®|·∫™|ƒÇ|·∫∞|·∫Æ|·∫∂|·∫≤|·∫¥/g, "A");
  str = str.replace(/√à|√â|·∫∏|·∫∫|·∫º|√ä|·ªÄ|·∫æ|·ªÜ|·ªÇ|·ªÑ/g, "E");
  str = str.replace(/√å|√ç|·ªä|·ªà|ƒ®/g, "I");
  str = str.replace(/√í|√ì|·ªå|·ªé|√ï|√î|·ªí|·ªê|·ªò|·ªî|·ªñ|∆†|·ªú|·ªö|·ª¢|·ªû|·ª†/g, "O");
  str = str.replace(/√ô|√ö|·ª§|·ª¶|≈®|∆Ø|·ª™|·ª®|·ª∞|·ª¨|·ªÆ/g, "U");
  str = str.replace(/·ª≤|√ù|·ª¥|·ª∂|·ª∏/g, "Y");
  str = str.replace(/ƒê/g, "D");
  return str;
};

export const generateFileName = (
  title: string,
  quality: string,
  extension: string
): string => {
  const timestamp = Date.now();
  const sanitizedTitle = cleanAccent(title)
    .replace(/[^\w\s-]/g, "") // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    .trim()
    .replace(/\s+/g, "_") // Thay kho·∫£ng tr·∫Øng b·∫±ng d·∫•u g·∫°ch d∆∞·ªõi
    .toLowerCase() // Chuy·ªÉn ƒë·ªïi th√†nh ch·ªØ th∆∞·ªùng
    .substring(0, 50); // Gi·ªõi h·∫°n ƒë·ªô d√†i ti√™u ƒë·ªÅ

  return `${sanitizedTitle}_${quality}_${timestamp}.${extension}`;
};


export async function getFileSize(url: string): Promise<any> {
  try {
    const response = await axios.head(url);
    const contentLength = response.headers["content-length"];
    if (contentLength) {
      const sizeInBytes = parseInt(contentLength, 10);

      return sizeInBytes;
    }
    return "???";
  } catch (error) {
    console.error("L·ªói khi l·∫•y k√≠ch th∆∞·ªõc file:", error);
    return "???";
  }
}

export function byteToMb(bytes: number) {
  if (bytes) {
    const mb = bytes / (1024 * 1024);
    console.log("üöÄ ~ byteToMb ~ mb:", mb);
    if (mb) {
      return mb.toFixed(1) ? `(${mb.toFixed(1)} MB)` : "";
    }
    return "";
  }
  return "";
}

export function checkQuality(quality: string) {
  return quality.includes("720") || quality.includes("1080") || quality.includes("hd");
}
